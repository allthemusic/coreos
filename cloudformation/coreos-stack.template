{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Internal tools running on CoreOS, including Dimwit Production",
  "Parameters": {
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "WorkerInstanceType": {
      "Description": "EC2 HVM instance type for the worker nodes",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 HVM instance type."
    },
    "CoreInstanceType": {
      "Description": "EC2 HVM instance type for the Core Etcd cluster",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 HVM instance type."
    },
    "WorkerClusterSize": {
      "Default": "1",
      "MinValue": "0",
      "Description": "Number of *worker* nodes in cluster (1-12).",
      "Type": "Number"
    },
    "CoreClusterSize": {
      "Default": "1",
      "MinValue": "1",
      "Description": "Number of nodes in cluster.",
      "Type": "Number"
    },
    "DiscoveryURL": {
      "Description": "An unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=<your cluster size>",
      "Type": "String"
    },
    "KeyPair": {
      "Description": "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Type": "String"
    }
  },

  "Mappings": {
    "RegionMap": {
      "eu-central-1": { "AMI": "ami-9c2b1181" },
      "ap-northeast-1": { "AMI": "ami-28fb5228" },
      "us-gov-west-1": { "AMI": "ami-13345730" },
      "sa-east-1": { "AMI": "ami-d59418c8" },
      "ap-southeast-2": { "AMI": "ami-ad115697" },
      "ap-southeast-1": { "AMI": "ami-3ce1e16e" },
      "us-east-1": { "AMI": "ami-f375bc98" },
      "us-west-2": { "AMI": "ami-1ffbfb2f" },
      "us-west-1": { "AMI": "ami-ef9261ab" },
      "eu-west-1": { "AMI": "ami-16b2ff61" }
    },
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      }
    }
  },

  "Resources": {
    "VPCStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "NotificationARNs": { "Ref" : "AWS::NotificationARNs" },
        "TemplateURL": "https://s3.amazonaws.com/cloudformation-templates.rtlong.com/vpc.template",
        "TimeoutInMinutes": "10"
      }
    },

    "SecurityGroupCore": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Core etcd Cluster",
        "VpcId": { "Fn::GetAtt": [ "VPCStack", "Outputs.VPCId" ] },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "AllowSSHFrom" }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": "core" }
        ]
      }
    },

    "IngressEtcd4001CoreFromCore": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupCore" },
        "IpProtocol": "tcp",
        "FromPort": "4001",
        "ToPort": "4001",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupCore", "GroupId" ] }
      }
    },

    "IngressEtcd4001CoreFromWorkers": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupCore" },
        "IpProtocol": "tcp",
        "FromPort": "4001",
        "ToPort": "4001",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupWorkers", "GroupId" ] }
      }
    },

    "IngressEtcdCoreFromCore": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupCore" },
        "IpProtocol": "tcp",
        "FromPort": "2379",
        "ToPort": "2380",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupCore", "GroupId" ] }
      }
    },

    "IngressEtcdCoreFromWorkers": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupCore" },
        "IpProtocol": "tcp",
        "FromPort": "2379",
        "ToPort": "2380",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupWorkers", "GroupId" ] }
      }
    },

    "IngressSSHCoreFromCore": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupCore" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupCore", "GroupId" ] }
      }
    },

    "IngressSSHCoreFromWorkers": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupCore" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupWorkers", "GroupId" ] }
      }
    },

    "SecurityGroupWorkers": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Workers/application nodes within the cluster",
        "VpcId": { "Fn::GetAtt": [ "VPCStack", "Outputs.VPCId" ] },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "AllowSSHFrom" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupELB", "GroupId" ] }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": "application" }
        ]
      }
    },

    "IngressEtcd4001WorkersFromWorkers": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "4001",
        "ToPort": "4001",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupWorkers", "GroupId" ] }
      }
    },

    "IngressEtcd4001WorkersFromCore": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "4001",
        "ToPort": "4001",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupCore", "GroupId" ] }
      }
    },

    "IngressEtcdWorkersFromWorkers": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "2379",
        "ToPort": "2380",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupWorkers", "GroupId" ] }
      }
    },

    "IngressEtcdWorkersFromCore": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "2379",
        "ToPort": "2380",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupCore", "GroupId" ] }
      }
    },

    "IngressSSHWorkersFromWorkers": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupWorkers", "GroupId" ] }
      }
    },

    "IngressSSHWorkersFromCore": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupCore", "GroupId" ] }
      }
    },

    "IngressApplicationsWorkersFromWorkers": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "3001",
        "ToPort": "3050",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupWorkers", "GroupId" ] }
      }
    },

    "IngressApplicationsWorkersFromCore": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "SecurityGroupWorkers" },
        "IpProtocol": "tcp",
        "FromPort": "3001",
        "ToPort": "3050",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "SecurityGroupCore", "GroupId" ] }
      }
    },

    "SecurityGroupELB": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ELB",
        "VpcId": { "Fn::GetAtt": [ "VPCStack", "Outputs.VPCId" ] },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Ref": "AllowSSHFrom" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": { "Ref": "AllowSSHFrom" }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": "elb" }
        ]
      }
    },

    "AutoScaleCore": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1a" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1c" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1d" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1e" ] }
        ],
        "LaunchConfigurationName": { "Ref": "LaunchConfigCore" },
        "MinSize": "1",
        "MaxSize": "11",
        "DesiredCapacity": { "Ref": "CoreClusterSize" },
        "NotificationConfigurations": [
          {
            "NotificationTypes" : [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
              "autoscaling:TEST_NOTIFICATION"
            ],
            "TopicARN" : { "Ref" : "AWS::NotificationARNs" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" },
                  "-Core"
                ]
              ]
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },

    "LaunchConfigCore": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "CoreInstanceType" },
        "KeyName": { "Ref": "KeyPair" },
        "SecurityGroups": [
          { "Ref": "SecurityGroupCore" }
        ],
        "AssociatePublicIpAddress": true,
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    discovery: ", { "Ref": "DiscoveryURL" }, "\n",
                "    advertise-client-urls: http://$private_ipv4:2379\n",
                "    initial-advertise-peer-urls: http://$private_ipv4:2380\n",
                "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
                "    listen-peer-urls: http://$private_ipv4:2380\n",
                "  fleet:\n",
                "    metadata: role=core\n",
                "  units:\n",
                "    - name: etcd2.service\n",
                "      command: start\n",
                "    - name: fleet.service\n",
                "      command: start\n"
              ]
            ]
          }
        }
      }
    },

    "AutoScaleWorkers": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1a" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1c" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1d" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1e" ] }
        ],
        "LaunchConfigurationName": { "Ref": "LaunchConfigWorkers" },
        "LoadBalancerNames": [
          // { "Ref": "ELB" }
        ],
        "MinSize": "1",
        "MaxSize": "12",
        "DesiredCapacity": { "Ref": "WorkerClusterSize" },
        "NotificationConfigurations": [
          {
            "NotificationTypes" : [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
              "autoscaling:TEST_NOTIFICATION"
            ],
            "TopicARN" : { "Ref" : "AWS::NotificationARNs" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  { "Ref": "AWS::StackName" },
                  "-Workers"
                ]
              ]
            },
            "PropagateAtLaunch": true
          }
        ]
      }
    },

    "LaunchConfigWorkers": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "WorkerInstanceType" },
        "KeyName": { "Ref": "KeyPair" },
        "SecurityGroups": [
          { "Ref": "SecurityGroupWorkers" }
        ],
        "AssociatePublicIpAddress": true,
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    proxy: on\n",
                "    discovery: ", { "Ref": "DiscoveryURL" }, "\n",
                "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
                "  fleet:\n",
                "    metadata: role=workers\n",
                "  units:\n",
                "    - name: etcd2.service\n",
                "      command: start\n",
                "    - name: fleet.service\n",
                "      command: start\n"
              ]
            ]
          }
        }
      }
    }/*,

    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AccessLoggingPolicy" : {
          "EmitInterval" : 5,
          "Enabled" : true,
          "S3BucketName" : "elb-access-logs.goodguide.com",
          "S3BucketPrefix" : { "Ref": "AWS::StackName" }
        },
        "ConnectionDrainingPolicy" : {
          "Enabled" : true,
          "Timeout" : 5
        },
        "ConnectionSettings" : {
          "IdleTimeout" : 900
        },
        "CrossZone" : true,
        "HealthCheck" : {
          "HealthyThreshold" : "2",
          "Interval" : "5",
          "Target" : "TCP:80",
          "Timeout" : "4",
          "UnhealthyThreshold" : "2"
        },
        "Listeners" : [
          {
            "InstancePort" : "80",
            "InstanceProtocol" : "HTTP",
            "LoadBalancerPort" : "443",
            "PolicyNames" : [ "SSLCipherPolicy" ],
            "Protocol" : "HTTPS",
            "SSLCertificateId" : "arn:aws:iam::394453120661:server-certificate/star-dot-goodguide-2014-04"
          }
        ],
        "Scheme" : "internet-facing",
        "Policies": [
          {
            "PolicyName" : "SSLCipherPolicy",
            "PolicyType" : "SSLNegotiationPolicyType",
            "Attributes" : [
              {
                "Name"  : "Reference-Security-Policy",
                "Value" : "ELBSecurityPolicy-2015-05"
              }
            ]
          }
        ],
        "SecurityGroups" : [
          { "Ref": "SecurityGroupELB" }
        ],
        "Subnets" : [
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1a" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1c" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1d" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1e" ] }
        ],
        "Tags" : [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" }
          }
        ]
      }
    },

    "RedisCluster": {
      "Type" : "AWS::ElastiCache::CacheCluster",
      "Properties" : {
        "AutoMinorVersionUpgrade" : true,
        "CacheNodeType" : "cache.t2.medium",
        "CacheParameterGroupName" : { "Ref": "ParameterGroupRedis" },
        "CacheSubnetGroupName" : { "Ref": "SubnetGroupCache" },
        "Engine" : "redis",
        "EngineVersion" : "2.8.19",
        "NotificationTopicArn" : { "Fn::Select": [0, { "Ref": "AWS::NotificationARNs" }] },
        "NumCacheNodes" : "1",
        "Port" : "6379",
        "VpcSecurityGroupIds" : [
          { "Ref": "SecurityGroupRedis" }
        ]
      }
    },

    "MemcacheCluster": {
      "Type" : "AWS::ElastiCache::CacheCluster",
      "Properties" : {
        "AutoMinorVersionUpgrade" : true,
        "CacheNodeType" : "cache.t2.medium",
        "CacheParameterGroupName" : { "Ref": "ParameterGroupMemcache" },
        "CacheSubnetGroupName" : { "Ref": "SubnetGroupCache" },
        "Engine" : "memcached",
        "EngineVersion" : "1.4.14",
        "NotificationTopicArn" : { "Fn::Select": [0, { "Ref": "AWS::NotificationARNs" }] },
        "NumCacheNodes" : "1",
        "Port" : "11211",
        "VpcSecurityGroupIds" : [
          { "Ref": "SecurityGroupMemcache" }
        ]
      }
    },

    "SecurityGroupMemcache": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Memcached cluster",
        "VpcId": { "Fn::GetAtt": [ "VPCStack", "Outputs.VPCId" ] },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "11211",
            "ToPort": "11211",
            "CidrIp": { "Ref": "AllowSSHFrom" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "11211",
            "ToPort": "11211",
            "SourceSecurityGroupId": { "Ref": "SecurityGroupWorkers" }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": "memcache" }
        ]
      }
    },

    "SecurityGroupRedis": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Redis cache cluster",
        "VpcId": { "Fn::GetAtt": [ "VPCStack", "Outputs.VPCId" ] },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "6379",
            "ToPort": "6379",
            "CidrIp": { "Ref": "AllowSSHFrom" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "6379",
            "ToPort": "6379",
            "SourceSecurityGroupId": { "Ref": "SecurityGroupWorkers" }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": "redis" }
        ]
      }
    },

    "SubnetGroupCache": {
      "Type" : "AWS::ElastiCache::SubnetGroup",
      "Properties" : {
        "Description" : {
          "Fn::Join": [ "", [ "cache subnets for ", { "Ref": "AWS::StackName" } ] ]
        },
        "SubnetIds" : [
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1a" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1c" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1d" ] },
          { "Fn::GetAtt": [ "VPCStack", "Outputs.Subnet1e" ] }
        ]
      }
    },

    "ParameterGroupMemcache": {
      "Type": "AWS::ElastiCache::ParameterGroup",
      "Properties": {
        "CacheParameterGroupFamily" : "memcached1.4",
        "Description" : {
          "Fn::Join": [ "", [ "memcache parameter group for ", { "Ref": "AWS::StackName" } ] ]
        },
        "Properties" : { }
      }
    },

    "ParameterGroupRedis": {
      "Type": "AWS::ElastiCache::ParameterGroup",
      "Properties": {
        "CacheParameterGroupFamily" : "redis2.8",
        "Description" : {
          "Fn::Join": [ "", [ "redis parameter group for ", { "Ref": "AWS::StackName" } ] ]
        },
        "Properties" : { }
      }
    }
    */
  },
  "Outputs": {
    // "ELBDnsName": {
    //   "Description": "The DNS name for the load balancer.",
    //   "Value": { "Fn::GetAtt": [ "ELB", "DNSName" ] }
    // }
  }
}
